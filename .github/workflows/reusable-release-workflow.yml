name: "Reusable server release workflow"
on:
  workflow_call:
    inputs:
      base_version:
        # A base version string in the A.B.C format
        type: string
        description: "Base version (e.g. 4.1.0) used at build time"
        required: true
        default: ${{ vars.SERVER_41_NEXT_PATCH_VERSION }}
      prerelease:
        type: boolean
        description: Is this a pre-release? (a beta, an RC)
        required: true
        default: true
      prerelease_kind:
        type: string
        description: "Preview version (e.g. beta) used at build time"
        required: false
        default: "beta"
      prerelease_identifier:
        # can be a number, a commit SHA prefix
        type: string
        description: "Preview identifier (e.g. an integer or a commit SHA) to use"
        required: false
        default: "1"
      release_repository:
        type: string
        description: "Repository in which a new release will be created"
        required: false
        default: "rabbitmq/server-packages"
      release_title:
          type: string
          description: "Release title (name)"
          required: true
      release_description:
        type: string
        description: "Release description (notes)"
        required: false
        default: "A development build of open source RabbitMQ"
      release_tag:
        type: string
        description: "Release tag. Ignored for alphas!"
        required: true
      gpg_sign_release:
        type: boolean
        description: "Should .deb and .rpm packages in this release be GPG-signed?"
        default: false
      publish_to_cloudsmith:
        type: boolean
        description: "Publish Debian and RPM packages to Cloudsmith?"
        required: false
        default: false
      cloudsmith_repository:
        type: string
        description: Cloudsmith repository to publish Debian and RPM packages to
        required: false


env:
  GITHUB_TOKEN: ${{ secrets.RABBITMQCI_BOT_TOKEN }}
  # makensis only accepts version numbers in the A.B.C.D format where every segment
  # is a positive integer. This means that for previews, the version can be {base}.{identifier}
  # or just {base}
  WINDOWS_INSTALLER_VERSION: ${{ inputs.base_version }}.99
  RELEASE_REPOSITORY: "rabbitmq/server-packages"

jobs:
  compute_unix_timestamp:
    runs-on: ubuntu-latest
    steps:
      - name: Get current UNIX timestamp
        uses: release-kit/unix-timestamp@v1
  compute_prerelease_values:
    runs-on: ubuntu-latest
    steps:
      - name: Compute prerelease identifier from commit SHA
        run: echo "PRERELEASE_IDENTIFIER=`echo ${{ github.sha }} | cut -c1-8`" >> $GITHUB_ENV
      - name: Compute human-readable release timestamp
        run: echo "PRERELEASE_TIMESTAMP=`date --rfc-3339=seconds`" >> $GITHUB_ENV
  source_tarball:
    runs-on: ubuntu-latest
    needs: [compute_unix_timestamp, compute_prerelease_values]
    container:
      image: rabbitmqdevenv/build-env-26.2
    steps:
      # Actions do not support conditional expressions in the env: section,
      # so workaround sets FULL_VERSION
      - name: Conditionall sets env.FULL_VERSION for a pre-release
        if: ${{ inputs.prerelease == 'true' || inputs.prerelease == true }}
        run: |
          echo "Pre-release? ${{ inputs.prerelease }} alpha? ${{ inputs.prerelease_kind == 'alpha' }}"
          echo "FULL_VERSION=${{ inputs.base_version }}-${{ inputs.prerelease_kind }}.${{ inputs.prerelease_identifier }}"
          echo "FULL_VERSION=${{ inputs.base_version }}-${{ inputs.prerelease_kind }}.${{ inputs.prerelease_identifier }}" >> $GITHUB_ENV
      - name: Conditionally sets env.FULL_VERSION for a final release
        if: ${{ inputs.prerelease == 'false' || inputs.prerelease == false }}
        run: |
          echo "Pre-release? ${{ inputs.prerelease }}"
          echo "FULL_VERSION=${{ inputs.base_version }}"
          echo "FULL_VERSION=${{ inputs.base_version }}" >> $GITHUB_ENV
      - name: Clone rabbitmq/rabbitmq-server
        uses: actions/checkout@v4
        with:
          repository: rabbitmq/rabbitmq-server
          ref: main
          path: rabbitmq-server
      - name: Clone rabbitmq/server-packages
        uses: actions/checkout@v4
        with:
          repository: rabbitmq/server-packages
          ref: main
          path: server-packages
      - name: Generate source tarball
        run: |
          cd rabbitmq-server
          gmake source-dist PROJECT_VERSION=${{ env.FULL_VERSION }}
      - name: Store source tarball
        uses: actions/upload-artifact@v4
        with:
          name: rabbitmq-server-${{ env.FULL_VERSION }}-source-tarball
          path: "rabbitmq-server/PACKAGES/*"
          retention-days: 2
  generic_binary_package:
    needs: source_tarball
    runs-on: ubuntu-latest
    container:
      image: rabbitmqdevenv/build-env-26.2
    steps:
      # Actions do not support conditional expressions in the env: section,
      # so workaround sets FULL_VERSION
      - name: Conditionall sets env.FULL_VERSION for a pre-release
        if: ${{ inputs.prerelease == 'true' || inputs.prerelease == true }}
        run: |
          echo "Pre-release? ${{ inputs.prerelease }} alpha? ${{ inputs.prerelease_kind == 'alpha' }}"
          echo "FULL_VERSION=${{ inputs.base_version }}-${{ inputs.prerelease_kind }}.${{ inputs.prerelease_identifier }}"
          echo "FULL_VERSION=${{ inputs.base_version }}-${{ inputs.prerelease_kind }}.${{ inputs.prerelease_identifier }}" >> $GITHUB_ENV
      - name: Conditionally sets env.FULL_VERSION for a final release
        if: ${{ inputs.prerelease == 'false' || inputs.prerelease == false }}
        run: |
          echo "Pre-release? ${{ inputs.prerelease }}"
          echo "FULL_VERSION=${{ inputs.base_version }}"
          echo "FULL_VERSION=${{ inputs.base_version }}" >> $GITHUB_ENV
      - name: Clone rabbitmq/rabbitmq-server
        uses: actions/checkout@v4
        with:
          repository: rabbitmq/rabbitmq-server
          ref: main
          path: rabbitmq-server
      - name: Fetch source tarball
        uses: actions/download-artifact@v4
        with:
          name: rabbitmq-server-${{ env.FULL_VERSION }}-source-tarball
          path: ./rabbitmq-server/PACKAGES
      - name: Build generic binary package
        run: |
          cd rabbitmq-server
          ls -lha ./PACKAGES
          gmake package-generic-unix TARBALL_SUFFIX=generic-unix \
                                     SOURCE_DIST_FILE=./PACKAGES/rabbitmq-server-${{ env.FULL_VERSION }}.tar.xz \
                                     PROJECT_VERSION=${{ env.FULL_VERSION }}
          ls -lha ./PACKAGES
      - name: Store generic binary build
        uses: actions/upload-artifact@v4
        with:
          name: rabbitmq-server-${{ env.FULL_VERSION }}-generic-unix
          path: "rabbitmq-server/PACKAGES/rabbitmq-server-generic-unix-${{ env.FULL_VERSION }}.tar.xz"
          retention-days: 2
  debian_package:
    needs: source_tarball
    runs-on: ubuntu-latest
    container:
      image: rabbitmqdevenv/build-env-26.2
    steps:
      # Actions do not support conditional expressions in the env: section,
      # so workaround sets FULL_VERSION
      - name: Conditionall sets env.FULL_VERSION for a pre-release
        if: ${{ inputs.prerelease == 'true' || inputs.prerelease == true }}
        run: |
          echo "Pre-release? ${{ inputs.prerelease }} alpha? ${{ inputs.prerelease_kind == 'alpha' }}"
          echo "FULL_VERSION=${{ inputs.base_version }}-${{ inputs.prerelease_kind }}.${{ inputs.prerelease_identifier }}"
          echo "FULL_VERSION=${{ inputs.base_version }}-${{ inputs.prerelease_kind }}.${{ inputs.prerelease_identifier }}" >> $GITHUB_ENV
      - name: Conditionally sets env.FULL_VERSION for a final release
        if: ${{ inputs.prerelease == 'false' || inputs.prerelease == false }}
        run: |
          echo "Pre-release? ${{ inputs.prerelease }}"
          echo "FULL_VERSION=${{ inputs.base_version }}"
          echo "FULL_VERSION=${{ inputs.base_version }}" >> $GITHUB_ENV
      - name: Import GPG key
        if: inputs.gpg_sign_release
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PRIVATE_KEY_PASSPHRASE }}
      - name: "Export SIGNING_KEY (key ID) used by the Debian package build target"
        if: inputs.gpg_sign_release
        run: |
          echo "SIGNING_KEY=${{ secrets.GPG_SIGNING_KEY_ID }}" >> $GITHUB_ENV
      - name: "Print public GPG keys in the keychain"
        if: inputs.gpg_sign_release
        run: |
          gpg --list-public-keys
      - name: Clone rabbitmq/rabbitmq-server
        uses: actions/checkout@v4
        with:
          repository: rabbitmq/rabbitmq-server
          ref: main
          path: rabbitmq-server
      - name: Clone rabbitmq/rabbitmq-server
        uses: actions/checkout@v4
        with:
          repository: rabbitmq/rabbitmq-packaging
          ref: main
          path: rabbitmq-packaging
      - name: Fetch source tarball
        uses: actions/download-artifact@v4
        with:
          name: rabbitmq-server-${{ env.FULL_VERSION }}-source-tarball
          path: ./rabbitmq-server/PACKAGES
      - name: Build Debian package with GPG signing
        if: inputs.gpg_sign_release
        env:
          DEB_SIGN_KEYID: ${{ secrets.GPG_SIGNING_KEY_ID }}
          SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY_ID }}
        run: |
          cd rabbitmq-packaging
          gmake package-deb PROJECT_VERSION=${{ env.FULL_VERSION }} \
                            SOURCE_DIST_FILE=../rabbitmq-server/PACKAGES/rabbitmq-server-${{ env.FULL_VERSION }}.tar.xz \
                            RABBITMQ_PACKAGING_REPO=. \
                            DEBIAN_VERSION="${{ env.FULL_VERSION }}" \
                            SAVE_CHANGELOG=yes \
                            INSTALL_BUILD_DEPS=no \
                            SIGNING_KEY=${{ secrets.GPG_SIGNING_KEY_ID }}
          cd ..
          ls -lha PACKAGES/
      - name: Build Debian package without GPG signing
        if: inputs.gpg_sign_release == false
        run: |
          cd rabbitmq-packaging
          gmake package-deb PROJECT_VERSION=${{ env.FULL_VERSION }} \
                            SOURCE_DIST_FILE=../rabbitmq-server/PACKAGES/rabbitmq-server-${{ env.FULL_VERSION }}.tar.xz \
                            RABBITMQ_PACKAGING_REPO=. \
                            DEBIAN_VERSION="${{ env.FULL_VERSION }}" \
                            SAVE_CHANGELOG=yes \
                            INSTALL_BUILD_DEPS=no
          cd ..
          ls -lha PACKAGES/
      - name: Store Debian package and build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rabbitmq-server-${{ env.FULL_VERSION }}-debian-package
          path: "PACKAGES/*"
          retention-days: 2
  rpm_package:
    needs: source_tarball
    runs-on: ubuntu-latest
    container:
      image: rabbitmqdevenv/build-env-26.2
    steps:
      # Actions do not support conditional expressions in the env: section,
      # so workaround sets FULL_VERSION
      - name: Conditionall sets env.FULL_VERSION for a pre-release
        if: ${{ inputs.prerelease == 'true' || inputs.prerelease == true }}
        run: |
          echo "Pre-release? ${{ inputs.prerelease }} alpha? ${{ inputs.prerelease_kind == 'alpha' }}"
          echo "FULL_VERSION=${{ inputs.base_version }}-${{ inputs.prerelease_kind }}.${{ inputs.prerelease_identifier }}"
          echo "FULL_VERSION=${{ inputs.base_version }}-${{ inputs.prerelease_kind }}.${{ inputs.prerelease_identifier }}" >> $GITHUB_ENV
          # RPM needs a tilde ~ for prelease version separator
          echo "RPM_VERSION=${{ inputs.base_version }}~${{ inputs.prerelease_kind }}.${{ inputs.prerelease_identifier }}" >> $GITHUB_ENV
      - name: Conditionally sets env.FULL_VERSION for a final release
        if: ${{ inputs.prerelease == 'false' || inputs.prerelease == false }}
        run: |
          echo "Pre-release? ${{ inputs.prerelease }}"
          echo "FULL_VERSION=${{ inputs.base_version }}"
          echo "FULL_VERSION=${{ inputs.base_version }}" >> $GITHUB_ENV
          # RPM needs a tilde ~ for prelease version separator
          echo "RPM_VERSION=${{ inputs.base_version }}~${{ inputs.prerelease_kind }}.${{ inputs.prerelease_identifier }}" >> $GITHUB_ENV
      - name: Import GPG key
        if: inputs.gpg_sign_release
        env:
          GNUPGHOME: "${{ github.workspace }}/.gnupg"
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PRIVATE_KEY_PASSPHRASE }}
      - name: "Export SIGNING_KEY (key ID) used by the Debian package build target"
        if: inputs.gpg_sign_release
        run: |
          echo "SIGNING_KEY=${{ secrets.GPG_SIGNING_KEY_ID }}" >> $GITHUB_ENV
      - name: "Print public GPG keys in the keychain"
        if: inputs.gpg_sign_release
        run: |
          gpg --list-public-keys
      - name: Clone rabbitmq/rabbitmq-server
        uses: actions/checkout@v4
        with:
          repository: rabbitmq/rabbitmq-server
          ref: main
          path: rabbitmq-server
      - name: Clone rabbitmq/rabbitmq-server
        uses: actions/checkout@v4
        with:
          repository: rabbitmq/rabbitmq-packaging
          ref: main
          path: rabbitmq-packaging
      - name: Fetch source tarball
        uses: actions/download-artifact@v4
        with:
          name: rabbitmq-server-${{ env.FULL_VERSION }}-source-tarball
          path: ./rabbitmq-server/PACKAGES
      - name: Build RPM package with GPG signing
        if: inputs.gpg_sign_release
        env:
          SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY_ID }}
          GNUPGHOME: "${{ github.workspace }}/.gnupg"
        run: |
          cd rabbitmq-packaging
          gmake package-rpm-rhel8 RABBITMQ_VERSION=${{ env.FULL_VERSION }} \
                                  PROJECT_VERSION=${{ env.FULL_VERSION }} \
                                  RABBITMQ_PACKAGING_REPO=. \
                                  RPM_VERSION="${{ env.RPM_VERSION }}" \
                                  SOURCE_DIST_FILE=../rabbitmq-server/PACKAGES/rabbitmq-server-${{ env.FULL_VERSION }}.tar.xz
          cd ..
          ls -lha PACKAGES/
      - name: Build RPM package without GPG signing
        if: inputs.gpg_sign_release == false
        run: |
          cd rabbitmq-packaging
          gmake package-rpm-rhel8 RABBITMQ_VERSION=${{ env.FULL_VERSION }} \
                                  PROJECT_VERSION=${{ env.FULL_VERSION }} \
                                  RABBITMQ_PACKAGING_REPO=. \
                                  RPM_VERSION="${{ env.RPM_VERSION }}" \
                                  SOURCE_DIST_FILE=../rabbitmq-server/PACKAGES/rabbitmq-server-${{ env.FULL_VERSION }}.tar.xz
          cd ..
          ls -lha PACKAGES/
      - name: Store RPM package and build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rabbitmq-server-${{ env.FULL_VERSION }}-rpm-package
          path: "PACKAGES/*"
          retention-days: 2
  windows_packages:
    needs: source_tarball
    runs-on: ubuntu-latest
    container:
      image: rabbitmqdevenv/build-env-26.2
    steps:
      # Actions do not support conditional expressions in the env: section,
      # so workaround sets FULL_VERSION
      - name: Conditionall sets env.FULL_VERSION for a pre-release
        if: ${{ inputs.prerelease == 'true' || inputs.prerelease == true }}
        run: |
          echo "Pre-release? ${{ inputs.prerelease }} alpha? ${{ inputs.prerelease_kind == 'alpha' }}"
          echo "FULL_VERSION=${{ inputs.base_version }}-${{ inputs.prerelease_kind }}.${{ inputs.prerelease_identifier }}"
          echo "FULL_VERSION=${{ inputs.base_version }}-${{ inputs.prerelease_kind }}.${{ inputs.prerelease_identifier }}" >> $GITHUB_ENV
      - name: Conditionally sets env.FULL_VERSION for a final release
        if: ${{ inputs.prerelease == 'false' || inputs.prerelease == false }}
        run: |
          echo "Pre-release? ${{ inputs.prerelease }}"
          echo "FULL_VERSION=${{ inputs.base_version }}"
          echo "FULL_VERSION=${{ inputs.base_version }}" >> $GITHUB_ENV
      - name: Clone rabbitmq/rabbitmq-server
        uses: actions/checkout@v4
        with:
          repository: rabbitmq/rabbitmq-server
          ref: main
          path: rabbitmq-server
      - name: Clone rabbitmq/rabbitmq-server
        uses: actions/checkout@v4
        with:
          repository: rabbitmq/rabbitmq-packaging
          ref: main
          path: rabbitmq-packaging
      - name: Fetch source tarball
        uses: actions/download-artifact@v4
        with:
          name: rabbitmq-server-${{ env.FULL_VERSION }}-source-tarball
          path: ./rabbitmq-server/PACKAGES
      - name: "Drop public code signing key file"
        if: inputs.gpg_sign_release
        run: |
          echo "${{ secrets.CODE_SIGNING_CERT }}" > ${{ github.workspace }}/code_signing.cert
      - name: "Drop code signing key file"
        if: inputs.gpg_sign_release
        run: |
          echo "${{ secrets.CODE_SIGNING_KEY }}" > ${{ github.workspace }}/code_signing.key
      - name: Build Windows binary package and NSIS-based installer with signing
        if: inputs.gpg_sign_release
        env:
          CODE_SIGNING_CERT: ${{ runner.temp }}/code_signing.cert
          CODE_SIGNING_KEY: ${{ runner.temp }}/code_signing.key
        run: |
          cd rabbitmq-packaging
          # IMPORTANT: PRODUCT_VERSION must use the A.B.C.D format where every component is a positive integer.
          #            This is an MSI and makensis build tooling requirement.
          gmake package-windows RABBITMQ_PACKAGING_REPO="." \
                                SOURCE_DIST_FILE=../rabbitmq-server/PACKAGES/rabbitmq-server-${{ env.FULL_VERSION }}.tar.xz \
                                VERSION=${{ env.FULL_VERSION }} \
                                PRODUCT_VERSION=${{ env.WINDOWS_INSTALLER_VERSION }}
          cd ..
          ls -lha PACKAGES/
      - name: Build Windows binary package and NSIS-based installer without signing
        if: inputs.gpg_sign_release == false
        run: |
          cd rabbitmq-packaging
          # IMPORTANT: PRODUCT_VERSION must use the A.B.C.D format where every component is a positive integer.
          #            This is an MSI and makensis build tooling requirement.
          gmake package-windows RABBITMQ_PACKAGING_REPO="." \
                                SOURCE_DIST_FILE=../rabbitmq-server/PACKAGES/rabbitmq-server-${{ env.FULL_VERSION }}.tar.xz \
                                VERSION=${{ env.FULL_VERSION }} \
                                PRODUCT_VERSION=${{ env.WINDOWS_INSTALLER_VERSION }}
          cd ..
          ls -lha PACKAGES/
      - name: Remove signing artifacts
        run: |
          rm -f ${{ runner.temp }}/code_signing.cert
          rm -f ${{ runner.temp }}/code_signing.key
      - name: Store Windows binary package and installer
        uses: actions/upload-artifact@v4
        with:
          # singular for consistency, even though it contains two packages
          name: rabbitmq-server-${{ env.FULL_VERSION }}-windows-package
          path: "PACKAGES/*"
          retention-days: 2
  create_gh_release:
    needs: [compute_prerelease_values, source_tarball, generic_binary_package, debian_package, rpm_package, windows_packages]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # for tagging
      - name: Get current UNIX timestamp
        id: compute_unix_timestamp
        uses: release-kit/unix-timestamp@v1
      # Actions do not support conditional expressions in the env: section,
      # so workaround sets FULL_VERSION
      - name: Conditionall sets env.FULL_VERSION for a pre-release
        if: ${{ inputs.prerelease == 'true' || inputs.prerelease == true }}
        run: |
          echo "Pre-release? ${{ inputs.prerelease }} alpha? ${{ inputs.prerelease_kind == 'alpha' }}"
          echo "FULL_VERSION=${{ inputs.base_version }}-${{ inputs.prerelease_kind }}.${{ inputs.prerelease_identifier }}"
          echo "FULL_VERSION=${{ inputs.base_version }}-${{ inputs.prerelease_kind }}.${{ inputs.prerelease_identifier }}" >> $GITHUB_ENV
      - name: Conditionally sets env.FULL_VERSION for a final release
        if: ${{ inputs.prerelease == 'false' || inputs.prerelease == false }}
        run: |
          echo "Pre-release? ${{ inputs.prerelease }}"
          echo "FULL_VERSION=${{ inputs.base_version }}"
          echo "FULL_VERSION=${{ inputs.base_version }}" >> $GITHUB_ENV
      - name: Fetch source tarball
        uses: actions/download-artifact@v4
        with:
          name: rabbitmq-server-${{ env.FULL_VERSION }}-source-tarball
          path: ./artifacts
      - name: Fetch generic binary package
        uses: actions/download-artifact@v4
        with:
          name: rabbitmq-server-${{ env.FULL_VERSION }}-generic-unix
          path: ./artifacts
      - name: Fetch Debian package and build artifacts
        uses: actions/download-artifact@v4
        with:
          name: rabbitmq-server-${{ env.FULL_VERSION }}-debian-package
          path: ./artifacts
      - name: Fetch RPM package
        uses: actions/download-artifact@v4
        with:
          name: rabbitmq-server-${{ env.FULL_VERSION }}-rpm-package
          path: ./artifacts
      - name: Fetch Windows packages
        uses: actions/download-artifact@v4
        with:
          name: rabbitmq-server-${{ env.FULL_VERSION }}-windows-package
          path: ./artifacts
      - name: List collected artifacts
        run: ls -lha ./artifacts
      - name: Create a GitHub release with a pre-computed version
        id: create_gh_release
        if: ${{ !(inputs.prerelease_kind == 'alpha') }}
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.MK_RELEASE_AUTOMATION_TOKEN }}
          repository: ${{ inputs.release_repository || env.RELEASE_REPOSITORY }}
          tag_name: ${{ inputs.release_tag }}
          name: ${{ inputs.release_title }}
          body: ${{ inputs.release_description }}
          prerelease: ${{ inputs.prerelease == true || inputs.prerelease == 'true' }}
          files: ./artifacts/*
      - name: Create a GitHub release with an alpha version
        id: create_alpha_gh_release
        if: ${{ (inputs.prerelease == 'true' || inputs.prerelease == true) && inputs.prerelease_kind == 'alpha' }}
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.MK_RELEASE_AUTOMATION_TOKEN }}
          repository: ${{ inputs.release_repository || env.RELEASE_REPOSITORY }}
          tag_name: alphas.${{ steps.compute_unix_timestamp.outputs.timestamp }}
          name: ${{ inputs.release_title }}
          body: ${{ inputs.release_description }}
          prerelease: ${{ inputs.prerelease == true || inputs.prerelease == 'true' }}
          files: ./artifacts/*
  publish_rpm_package_to_cloudsmith:
    if: ${{ inputs.publish_to_cloudsmith == true || inputs.publish_to_cloudsmith == 'true' }}
    needs: [rpm_package]
    runs-on: ubuntu-latest
    steps:
      # Actions do not support conditional expressions in the env: section,
      # so workaround sets FULL_VERSION
      - name: Conditionall sets env.FULL_VERSION for a pre-release
        if: ${{ inputs.prerelease == 'true' || inputs.prerelease == true }}
        run: |
          echo "Pre-release? ${{ inputs.prerelease }} alpha? ${{ inputs.prerelease_kind == 'alpha' }}"
          echo "FULL_VERSION=${{ inputs.base_version }}-${{ inputs.prerelease_kind }}.${{ inputs.prerelease_identifier }}"
          echo "FULL_VERSION=${{ inputs.base_version }}-${{ inputs.prerelease_kind }}.${{ inputs.prerelease_identifier }}" >> $GITHUB_ENV
      - name: Conditionally sets env.FULL_VERSION for a final release
        if: ${{ inputs.prerelease == 'false' || inputs.prerelease == false }}
        run: |
          echo "Pre-release? ${{ inputs.prerelease }}"
          echo "FULL_VERSION=${{ inputs.base_version }}"
          echo "FULL_VERSION=${{ inputs.base_version }}" >> $GITHUB_ENV
      - name: Fetch Debian package and build artifacts
        uses: actions/download-artifact@v4
        with:
          name: rabbitmq-server-${{ env.FULL_VERSION }}-rpm-package
          path: ./artifacts
      - name: Fetch RPM package
        uses: actions/download-artifact@v4
        with:
          name: rabbitmq-server-${{ env.FULL_VERSION }}-rpm-package
          path: ./artifacts
      - name: Publish RPM package for el/8
        uses: docker://rabbitmqdevenv/cloudsmith-action:latest
        with:
          username: ${{ secrets.CLOUDSMITH_USERNAME }}
          organization: ${{ secrets.CLOUDSMITH_ORGANIZATION }}
          repository: ${{ inputs.cloudsmith_repository }}
          api_key: ${{ secrets.CLOUDSMITH_API_KEY }}
          distribution: el/8
          action: upload
          republish: true
          local_path: artifacts
          globs: '*.rpm'
          tags: rabbitmq
      - name: Publish RPM package for el/9
        uses: docker://rabbitmqdevenv/cloudsmith-action:latest
        with:
          username: ${{ secrets.CLOUDSMITH_USERNAME }}
          organization: ${{ secrets.CLOUDSMITH_ORGANIZATION }}
          repository: ${{ inputs.cloudsmith_repository }}
          api_key: ${{ secrets.CLOUDSMITH_API_KEY }}
          distribution: el/9
          action: upload
          republish: true
          local_path: artifacts
          globs: '*.rpm'
          tags: rabbitmq
  publish_debian_package_to_cloudsmith:
    if: ${{ inputs.publish_to_cloudsmith == true || inputs.publish_to_cloudsmith == 'true' }}
    needs: [debian_package]
    runs-on: ubuntu-latest
    steps:
      # Actions do not support conditional expressions in the env: section,
      # so workaround sets FULL_VERSION
      - name: Conditionall sets env.FULL_VERSION for a pre-release
        if: ${{ inputs.prerelease == 'true' || inputs.prerelease == true }}
        run: |
          echo "Pre-release? ${{ inputs.prerelease }} alpha? ${{ inputs.prerelease_kind == 'alpha' }}"
          echo "FULL_VERSION=${{ inputs.base_version }}-${{ inputs.prerelease_kind }}.${{ inputs.prerelease_identifier }}"
          echo "FULL_VERSION=${{ inputs.base_version }}-${{ inputs.prerelease_kind }}.${{ inputs.prerelease_identifier }}" >> $GITHUB_ENV
      - name: Conditionally sets env.FULL_VERSION for a final release
        if: ${{ inputs.prerelease == 'false' || inputs.prerelease == false }}
        run: |
          echo "Pre-release? ${{ inputs.prerelease }}"
          echo "FULL_VERSION=${{ inputs.base_version }}"
          echo "FULL_VERSION=${{ inputs.base_version }}" >> $GITHUB_ENV
      - name: Fetch Debian package and build artifacts
        uses: actions/download-artifact@v4
        with:
          name: rabbitmq-server-${{ env.FULL_VERSION }}-debian-package
          path: ./artifacts
      - name: Publish Debian package for ubuntu/noble
        uses: docker://rabbitmqdevenv/cloudsmith-action:latest
        with:
          username: ${{ secrets.CLOUDSMITH_USERNAME }}
          organization: ${{ secrets.CLOUDSMITH_ORGANIZATION }}
          repository: ${{ inputs.cloudsmith_repository }}
          api_key: ${{ secrets.CLOUDSMITH_API_KEY }}
          distribution: ubuntu/noble
          action: upload
          republish: true
          local_path: artifacts
          globs: '*.deb'
          tags: rabbitmq
      - name: Publish Debian package for ubuntu/jammy
        uses: docker://rabbitmqdevenv/cloudsmith-action:latest
        with:
          username: ${{ secrets.CLOUDSMITH_USERNAME }}
          organization: ${{ secrets.CLOUDSMITH_ORGANIZATION }}
          repository: ${{ inputs.cloudsmith_repository }}
          api_key: ${{ secrets.CLOUDSMITH_API_KEY }}
          distribution: ubuntu/jammy
          action: upload
          republish: true
          local_path: artifacts
          globs: '*.deb'
          tags: rabbitmq
      - name: Publish Debian package for ubuntu/focal
        uses: docker://rabbitmqdevenv/cloudsmith-action:latest
        with:
          username: ${{ secrets.CLOUDSMITH_USERNAME }}
          organization: ${{ secrets.CLOUDSMITH_ORGANIZATION }}
          repository: ${{ inputs.cloudsmith_repository }}
          api_key: ${{ secrets.CLOUDSMITH_API_KEY }}
          distribution: ubuntu/focal
          action: upload
          republish: true
          local_path: artifacts
          globs: '*.deb'
          tags: rabbitmq
      - name: Publish Debian package for debian/bookworm
        uses: docker://rabbitmqdevenv/cloudsmith-action:latest
        with:
          username: ${{ secrets.CLOUDSMITH_USERNAME }}
          organization: ${{ secrets.CLOUDSMITH_ORGANIZATION }}
          repository: ${{ inputs.cloudsmith_repository }}
          api_key: ${{ secrets.CLOUDSMITH_API_KEY }}
          distribution: debian/bookworm
          action: upload
          republish: true
          local_path: artifacts
          globs: '*.deb'
          tags: rabbitmq
      - name: Publish Debian package for debian/bullseye
        uses: docker://rabbitmqdevenv/cloudsmith-action:latest
        with:
          username: ${{ secrets.CLOUDSMITH_USERNAME }}
          organization: ${{ secrets.CLOUDSMITH_ORGANIZATION }}
          repository: ${{ inputs.cloudsmith_repository }}
          api_key: ${{ secrets.CLOUDSMITH_API_KEY }}
          distribution: debian/bullseye
          action: upload
          republish: true
          local_path: artifacts
          globs: '*.deb'
          tags: rabbitmq
